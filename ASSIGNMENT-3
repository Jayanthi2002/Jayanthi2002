import uuid

from flask import Flask




instance_id = uuid.uuid4().hex

app = Flask(__name__)







@app.route("/")

def get_instance_id():

    return f"<b style='font-size:30px;color:red;'>Instance ID: {instance_id}</b>"










if __name__ == "__main__":

    app.run(port=5000, host="0.0.0.0")


apiVersion: v1


kind: ServiceAccount


metadata:


  name: admin-user


  namespace: kubernetes-dashboard


---


apiVersion: v1


kind: Secret


metadata:


  name: admin-user-token


  namespace: kubernetes-dashboard


  annotations:


    kubernetes.io/service-account.name: admin-user


type: kubernetes.io/service-account-token


import uuid


from flask import Flask






instance_id = uuid.uuid4().hex


app = Flask(__name__)










@app.route("/")


def get_instance_id():


    return f"<b style='font-size:30px;color:red;'>Instance ID: {instance_id}</b>"














if __name__ == "__main__":


    app.run(port=5000, host="0.0.0.0")

Footer


apiVersion: apps/v1

kind: Deployment

metadata:

  name: flask-app



spec:

  replicas: 3

  selector:

    matchLabels:

      app: flask-app

  template:

    metadata:

      labels:

        app: flask-app




    spec:

      containers:

        - name: flask-app-container

          image: flask-app-testing

          imagePullPolicy: Never

          ports:

            - containerPort: 5000

              protocol: TCP

apiVersion: networking.k8s.io/v1

kind: Ingress

metadata:

  name: flask-app-ingress

  annotations:

    kubernetes.io/ingress.class: nginx

    nginx.ingress.kubernetes.io/ssl-redirect: "false"




spec:

  # ingressClassName: nginx

  rules:

    - http:

        paths:

          - backend:

              service:

                name: flask-app-service

                port:

                  number: 5000

            path: /

            pathType: Prefix

apiVersion: v1

kind: Service

metadata:

  name: flask-app-service

spec:

  type: ClusterIP

  ports:

    - port: 5000

  selector:

    app: flask-app

apiVersion: apps/v1

kind: Deployment

metadata:

  name: flask-app




spec:

  replicas: 3

  selector:

    matchLabels:

      app: flask-app

  template:

    metadata:

      labels:

        app: flask-app




    spec:

      containers:

        - name: flask-app-container

          image: jp.icr.io/ibmtrainning/flask-app-testing

          imagePullPolicy: Always

          ports:

            - containerPort: 5000

              protocol: TCP
